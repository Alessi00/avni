import groovy.json.JsonSlurper

apply plugin: "nebula.ospackage"


ospackage {

    packageName = 'openchs-server'
    release = System.currentTimeMillis()
    version = "${project.version.replace('-SNAPSHOT', '')}"
    arch = NOARCH
    os = LINUX
    user = 'root'

    signingKeyId("72845CB15D05862A")
    signingKeyPassphrase("$System.env.KEY_PASSWORD")


    requires("java-1.8.0-openjdk")
    preInstall file("${project.rootProject.rootDir}/infra/rpm/scripts/preInstall.sh")
    postInstall file("${project.rootProject.rootDir}/infra/rpm/scripts/postInstall.sh")
    preUninstall file("${project.rootProject.rootDir}/infra/rpm/scripts/preUninstall.sh")
    postUninstall file("${project.rootProject.rootDir}/infra/rpm/scripts/postUninstall.sh")

    into '/opt/openchs'

    from(jar.outputs.files) {
        rename { String fileName ->
            fileName.replace("-${project.version}", "")
        }
        fileMode = 0644
        createDirectoryEntry = true
        into 'bin/'
    }

    from("${project.rootProject.rootDir}/infra/rpm/config/openchs.conf") {
        createDirectoryEntry = true
        into 'config'
        include('openchs.conf')
    }


    from("${project.rootProject.rootDir}/infra/rpm/service/openchs.pid") {
        fileMode = 0644
        createDirectoryEntry = true
        into 'run'
    }

    from("${project.rootProject.rootDir}/infra/rpm/service/openchs.log") {
        fileMode = 0644
        createDirectoryEntry = true
        into 'log'
    }

    from("${project.rootProject.rootDir}/infra/rpm/service/openchs") {
        fileMode = 0644
        createDirectoryEntry = true
        into 'scripts'
    }

    from("${project.rootProject.rootDir}/infra/rpm/service/start.sh") {
        fileMode = 0644
        createDirectoryEntry = true
        into 'scripts'
    }
}

buildRpm {
    dependsOn 'build'
}

task uploadRpm {
    dependsOn buildRpm
    def rpmName = buildRpm.assembleArchiveName()
    def rpmVersion = $System.env.CIRCLE_BUILD_NUM ?: 0
    def rpmFilePath = buildRpm.outputs.files.singleFile.getAbsolutePath()
    doLast {
        def response = ["curl", "-T", "$rpmFilePath", "-u$System.env.BINTRAY_USER:$System.env.BINTRAY_API_KEY", "https://api.bintray.com/content/openchs/rpm/OpenCHS/$rpmVersion/$rpmName?publish=1"].execute().text
        def json = new JsonSlurper().parseText(response?.trim() ? response : "[1]")
        println "\nUPLOAD RESULT\n"
        println json
        println "\nUPLOAD RESULT\n"
    }
}